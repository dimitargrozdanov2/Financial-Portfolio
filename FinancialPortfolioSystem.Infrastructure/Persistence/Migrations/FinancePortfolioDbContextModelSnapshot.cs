// <auto-generated />
using System;
using FinancialPortfolioSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinancialPortfolioSystem.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(FinancePortfolioDbContext))]
    partial class FinancePortfolioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinancialPortfolioSystem.Domain.Models.Assets.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("MarketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TickerSymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Assets", t =>
                        {
                            t.HasCheckConstraint("CK_Asset_Description", "LEN([Description]) >= 10");

                            t.HasCheckConstraint("CK_Asset_MarketPrice", "[MarketPrice] > 0");

                            t.HasCheckConstraint("CK_Asset_Name", "LEN([Name]) >= 2");

                            t.HasCheckConstraint("CK_Asset_TickerSymbol", "LEN([TickerSymbol]) >= 1");
                        });
                });

            modelBuilder.Entity("FinancialPortfolioSystem.Domain.Models.Client.ClientAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<decimal>("AverageCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ClientPortfolioId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ClientPortfolioId");

                    b.ToTable("ClientAssets", t =>
                        {
                            t.HasCheckConstraint("CK_ClientAsset_AverageCost", "[AverageCost] >= 0");

                            t.HasCheckConstraint("CK_ClientAsset_Quantity", "[Quantity] >= 0");
                        });
                });

            modelBuilder.Entity("FinancialPortfolioSystem.Domain.Models.Client.ClientPortfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClientPortfolios");
                });

            modelBuilder.Entity("FinancialPortfolioSystem.Domain.Models.Client.ClientTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientPortfolioId")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientPortfolioId");

                    b.ToTable("ClientTransactions", t =>
                        {
                            t.HasCheckConstraint("CK_ClientTransaction_PricePerUnit", "[PricePerUnit] > 0");

                            t.HasCheckConstraint("CK_ClientTransaction_Quantity", "[Quantity] >= 1");
                        });
                });

            modelBuilder.Entity("FinancialPortfolioSystem.Domain.Models.Client.ClientAsset", b =>
                {
                    b.HasOne("FinancialPortfolioSystem.Domain.Models.Assets.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinancialPortfolioSystem.Domain.Models.Client.ClientPortfolio", null)
                        .WithMany("ClientAssets")
                        .HasForeignKey("ClientPortfolioId");
                });

            modelBuilder.Entity("FinancialPortfolioSystem.Domain.Models.Client.ClientTransaction", b =>
                {
                    b.HasOne("FinancialPortfolioSystem.Domain.Models.Client.ClientPortfolio", null)
                        .WithMany("Transactions")
                        .HasForeignKey("ClientPortfolioId");
                });

            modelBuilder.Entity("FinancialPortfolioSystem.Domain.Models.Client.ClientPortfolio", b =>
                {
                    b.Navigation("ClientAssets");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
